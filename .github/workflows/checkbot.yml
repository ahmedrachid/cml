name: checkbot

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

env:
  repo_token: ${{ secrets.TEST_GITHUB_TOKEN }}

jobs:
  # check that CML container builds properly
  build-container:
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/tests') }}
    runs-on: [ubuntu-18.04]

    steps:
      - uses: actions/checkout@v2

      - name: Build test image and publish        
        run: | 
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          docker build -t dvcorg/cml -f ./docker/Dockerfile .
          docker build -t dvcorg/cml-py3 -f ./docker/Dockerfile-py3 .

          docker tag dvcorg/cml dvcorg/cml-test
          docker push dvcorg/cml-test
          docker run --name runner --rm \
            -e "repo_token=$repo_token" \
            -e "RUNNER_REPO=https://github.com/${GITHUB_REPOSITORY}" \
            -e "RUNNER_LABELS=cml-docker" \
            -e "RUNNER_IDLE_TIMEOUT=10" \
            dvcorg/cml-test

  # test container all CML features, vega and actions with issues in the past
  check-container:
    needs: build-container
    runs-on: [ubuntu-18.04]
    container: dvcorg/cml-test

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.3
          
      - uses: r-lib/actions/setup-r@master

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: "CML test"
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo 'Check container!' > report.md
          vl2svg assets/vega-lite.json | cml-publish --md >> report.md
          vl2png assets/vega-lite.json | cml-publish --md >> report.md
          #cml-send-comment report.md
          #cml-send-github-check report.md

          cml-runner \
            --cloud-spot \
            --cloud azure \
            --cloud-region eastus \
            --cloud-type Standard_NC6 \
            --idle-timeout 1800 \
            --labels cml-runner-az-gpu

          cml-runner \
            --cloud-spot \
            --cloud aws \
            --cloud-region us-west \
            --cloud-type g2.2xlarge \
            --idle-timeout 1800 \
            --labels cml-runner-aws-gpu

  test_machine_aws:
    needs: check-container
    runs-on: [self-hosted,cml-runner-aws-gpu]
    steps:
    - name: "tests"
      run: |
        nvidia-smi

  test_container_aws:
    needs: check-container
    runs-on: [self-hosted,cml-runner-aws-gpu]
    container:
      image: docker://dvcorg/cml-test
      options: --gpus all
    steps:
    - name: "tests"
      run: |
        nvidia-smi

  test_machine_az:
    needs: check-container
    runs-on: [self-hosted,cml-runner-az-gpu]
    steps:
    - name: "tests"
      run: |
        nvidia-smi

  test_container_az:
    needs: check-container
    runs-on: [self-hosted,cml-runner-az-gpu]
    container:
      image: docker://dvcorg/cml-test
      options: --gpus all
    steps:
    - name: "tests"
      run: |
        nvidia-smi

  chatbot:
    if: contains(github.event.comment.body, '/cml-')
    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - name: chatops
        id: chatops
        uses: actions/github-script@v1
        env:
          COMMAND: ${{github.event.comment.body}}
        with:
          github-token: ${{ secrets.TEST_GITHUB_TOKEN }}
          script: |
            github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            }).then( (pr) => {
              console.log(`::set-output name=COMMAND::${process.env.COMMAND}`)
            })
            
      - name: chatactions
        run: |
          npm ci
          sudo npm link
          ${{steps.chatops.outputs.COMMAND}}
